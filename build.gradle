plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.3'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.three'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral()
}

ext {
    set('springCloudVersion', "2023.0.3")
}

dependencies {
    // JUnit
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.2'
    testImplementation 'org.springframework.boot:spring-boot-starter-test:3.3.3'
    // Elasticsearch
    implementation 'org.springframework.boot:spring-boot-starter-data-elasticsearch'
    // Mongodb
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
    // Web
    implementation 'org.springframework.boot:spring-boot-starter-web'
    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    // Postgresql
    runtimeOnly 'org.postgresql:postgresql'
    // Redis
//    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
//    implementation 'org.redisson:redisson-spring-boot-starter:3.27.2'
    // JPA
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    // Test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    // QueryDSL
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"
    //S3
    implementation 'software.amazon.awssdk:s3:2.25.10'
    implementation 'software.amazon.awssdk:core:2.25.10'

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // JWT
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    // security
    implementation 'org.springframework.boot:spring-boot-starter-security'

    // H2
    implementation 'com.h2database:h2:2.2.224'

    // FeignClient
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'

    // 쿼리 파라미터 로그를 실제 값으로 출력 (단, 임베디드 DB는 적용되지 않음)
    runtimeOnly 'p6spy:p6spy:3.9.1'

    // Map Struct
    implementation 'org.mapstruct:mapstruct:1.5.3.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.3.Final'
    annotationProcessor 'org.projectlombok:lombok-mapstruct-binding:0.2.0'
    testAnnotationProcessor 'org.mapstruct:mapstruct-processor:1.5.3.Final'

    // 유효성검사
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // chat gpt
    implementation 'com.fasterxml.jackson.core:jackson-databind'
    implementation 'org.slf4j:slf4j-api'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'

    // swagger
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'

}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

configurations.configureEach {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        if (details.requested.group == 'org.junit.platform') {
            details.useVersion '1.10.2'
        }
    }
}

def querydslDir = layout.buildDirectory.dir("generated/querydsl").get().asFile

sourceSets {
    main.java.srcDirs += querydslDir
}

bootJar {
    archiveFileName = 'reciping-recipe-service.jar'
}